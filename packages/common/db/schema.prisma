generator client {
    provider = "prisma-client-js"
    output = "../generated/client"
    previewFeatures = [ "interactiveTransactions" ]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Types
enum GuildRole {
    Owner
    Manager
    Moderator

    @@map("guildrole")
}

enum TeamMemberRole {
    Member
    Permanent_Fill @map("Permanent Fill")
    Commander
    Moderator
    Manager

    @@map("teammemberrole")
}

enum Visibility {
    Public
    Protected
    Members

    @@map("visibility")
}

// Tables
model User {
    user_id             Int         @id @default(autoincrement())
    snowflake           BigInt      @unique
    username            String      @db.VarChar(32)
    discriminator       Int         @db.SmallInt
    created_at          DateTime    @default(now()) @db.Timestamptz(6)
    updated_at          DateTime    @default(now()) @db.Timestamptz(6)

    guild_managers      GuildManager[]
    accounts            GuildWars2Account[]
    profile             Profile?
    user_profile        UserProfile?
    guild_memberships   GuildMember[]
    team_memberships    TeamMembership[]
    guild_ownerships    GuildOwner[]

    @@map("users")
}

model Profile {
    profile_id  Int         @id @default(autoincrement())
    user_id     Int         @unique
    avatar      String?     @db.VarChar
    created_at  DateTime    @default(now()) @db.Timestamptz(6)
    updated_at  DateTime    @default(now()) @db.Timestamptz(6)

    user         User       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
    user_profile UserProfile?

    @@map("profiles")
}

model GuildWars2Account {
    account_id Int      @id @default(autoincrement())
    user_id    Int
    api_key    String?
    main       Boolean  @default(false)
    verified   Boolean  @default(false)
    created_at DateTime @default(now()) @db.Timestamptz(6)
    updated_at DateTime @default(now()) @db.Timestamptz(6)

    user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

    @@map("guildwars2accounts")
}

model GuildManager {
    guild_member_id Int @unique
    guild_id Int
    user_id  Int
    role     GuildRole

    guild_member GuildMember @relation(fields: [guild_member_id], references: [guild_member_id])
    user User @relation(fields: [user_id], references: [user_id])
    guild Guild @relation(fields: [guild_id], references: [guild_id])

    @@unique([guild_id, user_id])
    @@map("guildmanagers")
}

model GuildOwner {
    guild_member_id Int @unique
    guild_id Int @unique
    user_id Int

    guild_member GuildMember @relation(fields: [guild_member_id], references: [guild_member_id])
    user User @relation(fields: [user_id], references: [user_id])
    guild Guild @relation(fields: [guild_id], references: [guild_id])

    @@unique([guild_id, user_id])
    @@map("guildowners")
}

model GuildMember {
    guild_member_id Int     @id @default(autoincrement())
    user_id   Int
    guild_id  Int
    role      GuildRole?
    nickname  String?
    avatar    String? @db.VarChar
    created_at DateTime @default(now()) @db.Timestamptz(6)
    updated_at DateTime @default(now()) @db.Timestamptz(6)
    deleted_at DateTime? @db.Timestamptz(6)

    guild     Guild   @relation(fields: [guild_id], references: [guild_id], onDelete: NoAction, onUpdate: NoAction)
    user      User    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
    owner_relations   GuildOwner[]
    manager_relations GuildManager[]
    team_memberships  TeamMember[]

    @@unique([ user_id, guild_id ])
    @@map("guildmembers")
}

model Guild {
    guild_id         Int             @id @default(autoincrement())
    snowflake        BigInt          @unique
    alias            String          @unique @db.VarChar(32)
    name             String
    icon             String?         @db.VarChar
    description      String?
    preferred_locale String          @db.VarChar(5)
    manager_role     BigInt?
    moderator_role   BigInt?
    created_at       DateTime        @default(now()) @db.Timestamptz(6)
    updated_at       DateTime        @default(now()) @db.Timestamptz(6)
    deleted_at       DateTime?       @db.Timestamptz(6)

    managers         GuildManager[]
    members          GuildMember[]
    teams            Team[]
    owner            GuildOwner?

    @@map("guilds")
}

model Team {
    team_id     Int           @id @default(autoincrement())
    guild_id    Int
    alias       String        @unique @db.VarChar(32)
    name        String
    description String?
    role        BigInt?       @unique
    channel     BigInt?
    color       Int?
    icon        String?       @db.VarChar
    created_at  DateTime      @default(now()) @db.Timestamptz(6)
    updated_at  DateTime      @default(now()) @db.Timestamptz(6)

    guild       Guild        @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: NoAction)
    members     TeamMember[]
    times       TeamTime[]
    memberships TeamMembership[]

    @@map("teams")
}

model TeamMember {
    member_id  Int            @id @default(autoincrement())
    team_id    Int
    guild_member_id Int
    role       TeamMemberRole @default(Member)
    visibility Visibility     @default(Protected)
    created_at DateTime       @default(now()) @db.Timestamptz(6)
    updated_at DateTime       @default(now()) @db.Timestamptz(6)

    team       Team          @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)
    guild_member GuildMember @relation(fields: [guild_member_id], references: [guild_member_id], onDelete: Cascade, onUpdate: NoAction)

    @@unique([team_id, guild_member_id])
    @@map("teammembers")
}

model TeamMembership {
    team_id Int
    user_id Int

    team Team @relation(fields: [team_id], references: [team_id])
    user User @relation(fields: [user_id], references: [user_id])

    @@unique([team_id, user_id])
    @@map("teammemberships")
}

model TeamTime {
    time_id  Int      @id @default(autoincrement())
    team_id  Int?
    time     DateTime @db.Timestamptz(6)
    duration DateTime @db.Time(6)

    team     Team?   @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

    @@map("teamtimes")
}

// Views
model UserProfile {
    profile_id      Int @unique
    user_id         Int @unique
    snowflake       BigInt @unique
    username        String
    discriminator   Int
    avatar          String
    updated_at      DateTime
    created_at      DateTime

    user            User @relation(fields: [user_id], references: [user_id])
    profile         Profile @relation(fields: [profile_id], references: [profile_id])

    @@map("userprofiles")
}
