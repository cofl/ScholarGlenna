generator client {
    provider = "prisma-client-js"
    output = "../generated/client"
    previewFeatures = [ "extendedWhereUnique", "views", "clientExtensions", "multiSchema" ]
    binaryTargets = [ "native", "linux-musl-openssl-3.0.x" ]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = [ "log", "guild", "app", "public" ]
}

enum CharacterClass {
    Elementalist @map("elementalist")
    Engineer     @map("engineer")
    Guardian     @map("guardian")
    Mesmer       @map("mesmer")
    Necromancer  @map("necromancer")
    Ranger       @map("ranger")
    Revenant     @map("revenant")
    Thief        @map("thief")
    Warrior      @map("warrior")

    @@schema("public")
    @@map("characterclass")
}

enum EliteSpecialization {
    Core            @map("core")
    Tempest         @map("tempest")
    Scrapper        @map("scrapper")
    Dragonhunter    @map("dragonhunter")
    Chronomancer    @map("chronomancer")
    Reaper          @map("reaper")
    Druid           @map("druid")
    Herald          @map("herald")
    Daredevil       @map("daredevil")
    Berserker       @map("berserker")
    Weaver          @map("weaver")
    Holosmith       @map("holosmith")
    Firebrand       @map("firebrand")
    Mirage          @map("mirage")
    Scourge         @map("scourge")
    Soulbeast       @map("soulbeast")
    Renegade        @map("renegade")
    Deadeye         @map("deadeye")
    Spellbreaker    @map("spellbreaker")
    Catalyst        @map("catalyst")
    Mechanist       @map("mechanist")
    Willbender      @map("willbender")
    Virtuoso        @map("virtuoso")
    Harbinger       @map("harbinger")
    Untamed         @map("untamed")
    Vindicator      @map("vindicator")
    Specter         @map("specter")
    Bladesworn      @map("bladesworn")

    @@schema("public")
    @@map("elitespecialization")
}

// ========================================================================== //
//                                   LOGS                                     //
// ========================================================================== //

enum LogDifficultyType {
    NormalMode      @map("normal_mode")
    ChallengeMode   @map("challenge_mode")
    Emboldened      @map("emboldened_mode")

    @@schema("log")
    @@map("logdifficultytype")
}

enum Boss {
    // Wing 1
    ValeGuardian    @map("vale_guardian")
    Gorseval        @map("gorseval")
    Sabetha         @map("sabetha")

    // Wing 2
    Slothasor       @map("slothasor")
    BanditTrio      @map("bandit_trio")
    Matthias        @map("matthias")

    // Wing 3
    Escort          @map("escort")
    KeepConstruct   @map("keep_construct")
    TwistedCastle   @map("twisted_castle")
    Xera            @map("xera")

    // Wing 4
    Cairn           @map("cairn")
    MursaatOverseer @map("mursaat_overseer")
    Samarog         @map("samarog")
    Deimos          @map("deimos")

    // Wing 5
    SoullessHorror  @map("soulless_horror")
    RiverOfSouls    @map("river_of_souls")
    BrokenKing      @map("broken_king")
    SoulEater       @map("soul_eater")
    EyeOfJudgmentFate @map("eye_of_judgement_fate")
    Dhuum           @map("dhuum")

    // Wing 6
    ConjuredAmalgamate @map("conjured_amalgamate")
    TwinLargos      @map("twin_largos")
    Qadim           @map("qadim")

    // Wing 7
    Adina           @map("adina")
    Sabir           @map("sabir")
    QadimThePeerless @map("qadim_the_peerless")

    // Strikes
    Freezie         @map("freezie")
    IcebroodConstruct @map("icebrood_construct")
    FraenirOfJormag @map("fraenir_of_jormag")
    VoiceClawOfTheFallen @map("voice_claw_of_the_fallen")
    Boneskinner     @map("boneskinner")
    WhisperOfJormag @map("whisper_of_jormag")
    ColdWar         @map("cold_war")

    // Strikes 2
    AetherbladeHideout @map("aetherblade_hideout")
    XunlaiJadeJunkyard @map("xunlai_jade_junkyard")
    KainengOverlook @map("kaineng_overlook")
    HarvestTemple   @map("harvest_temple")
    OldLionsCourt   @map("old_lions_court")

    @@schema("log")
    @@map("boss")
}

model LogPlayer {
    id Int @id @default(autoincrement()) @map("log_player_id")
    logId Int @map("log_id")
    log Log @relation(references: [id], fields: [logId], onDelete: Cascade)

    teamMemberId Int? @map("team_member_id")
    teamMember TeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)

    character String
    account String
    group Int
    class CharacterClass
    specialization EliteSpecialization

    extendedData Json?

    @@schema("log")
    @@map("log_player")
}

model Log {
    id Int @id @default(autoincrement()) @map("log_id")
    teamId Int @map("team_id")
    url String @unique
    boss Boss
    difficulty LogDifficultyType
    emboldenedLevel Int @db.SmallInt @map("emboldened_level") @default(0)
    success Boolean
    duration Int // milliseconds

    players LogPlayer[]
    team Team @relation(fields: [teamId], references: [id], onDelete: Restrict)

    startAt DateTime @db.Timestamptz(3) @map("start_at")
    submittedAt DateTime @db.Timestamptz(3) @map("submitted_at")

    @@schema("public")
    @@map("log")
}

// ========================================================================== //
//                                  USERS                                     //
// ========================================================================== //

model User {
    id Int @id @default(autoincrement()) @map("user_id")
    snowflake BigInt @unique
    name String
    discriminator String @db.Char(4)
    icon String?

    guildMemberships GuildMember[]
    accounts Account[]
    profile Profile?
    @@schema("guild")
    @@map("user")
}

model Account {
    id Int @id @default(autoincrement()) @map("account")
    snowflake BigInt @unique
    userId Int @map("user_id")
    name String @unique
    apiKey String? @ignore

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@schema("guild")
    @@map("account")
}

// ========================================================================== //
//                                  GUILDS                                    //
// ========================================================================== //

model Guild {
    id Int @id @default(autoincrement()) @map("guild_id")
    snowflake BigInt @unique
    name String
    alias String @unique @db.VarChar(32)

    // Marks when the bot first became aware it wasn't in a guild anymore.
    lostRemoteReferenceAt DateTime? @db.Timestamptz(3) @map("lost_remote_reference_at")

    teams Team[]
    members GuildMember[]
    divisions Division[]
    @@schema("guild")
    @@map("guild")
}

model GuildMember {
    id Int @id @default(autoincrement()) @map("guild_member_id")
    snowflake BigInt // same as user.snowflake, to ease lookups and handling
    guildId Int @map("guild_id")
    userId Int @map("user_id")
    name String?
    icon String?

    // Marks when the bot first became aware a user wasn't in a guild anymore.
    lostRemoteReferenceAt DateTime? @db.Timestamptz(3) @map("lost_remote_reference_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
    teamMemberships TeamMember[]
    @@unique([userId, guildId])
    @@unique([snowflake, guildId])
    @@schema("guild")
    @@map("guildmember")
}

// ========================================================================== //
//                                 DIVISIONS                                  //
// ========================================================================== //

model Division {
    id Int @id @default(autoincrement()) @map("division_id")
    guildId Int @map("guild_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))
    name String

    // There will be at most one primary division per guild (unique index: only_one_primary_division_per_guild)
    primary Boolean @default(false)

    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
    teams Team[]
    @@schema("guild")
    @@map("division")
}

// ========================================================================== //
//                                  TEAMS                                     //
// ========================================================================== //

enum TeamType {
    Normal          @map("normal")
    Management      @map("management")
    InterestGroup   @map("interest_group")
    Inactive        @map("inactive")

    @@schema("guild")
    @@map("teamtype")
}

enum TeamMemberRole {
    Member          @map("member")
    Representative  @map("representative")
    Captain         @map("captain")

    @@schema("guild")
    @@map("teammemberrole")
}

enum TeamFocus {
    HOT             @map("hot")
    POF             @map("pof")
    RaidCM          @map("raid_cm")
    FullClear       @map("full_clear")
    FullClearCM     @map("full_clear_cm")
    EODCM           @map("eod_cm")
    HarvestTempleCM @map("harvest_temple_cm")
    Memes           @map("memes")
    IBS             @map("ibs")
    EOD             @map("eod")
    Dungeons        @map("dungeons")
    Fractals        @map("fractals")

    @@schema("guild")
    @@map("teamfocus")
}

enum TeamLevel {
    Progression     @map("progression")
    Experienced     @map("experienced")

    @@schema("guild")
    @@map("teamlevel")
}

enum TeamRegion {
    NorthAmerica    @map("north_america")
    Europe          @map("europe")
    AustraliaNA     @map("ocx_na")
    AustraliaEU     @map("ocx_eu")

    @@schema("guild")
    @@map("teamregion")
}

enum TeamDaylightSavings {
    RespectTime     @map("respect_time")
    RespectReset    @map("respect_reset")

    @@schema("guild")
    @@map("teamdaylightsavings")
}

model Team {
    id Int @id @default(autoincrement()) @map("team_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))
    guildId Int @map("guild_id")
    divisionId Int @map("division_id")
    type TeamType @default(Normal)
    name String
    alias String @db.VarChar(32)
    focus TeamFocus @default(HOT)
    level TeamLevel @default(Progression)
    region TeamRegion @default(NorthAmerica)
    capacity Int? @db.SmallInt @default(10)
    primaryTimeZone String @default("America/Los_Angeles") @map("primary_time_zone")
    daylightSavings TeamDaylightSavings @default(RespectReset) @map("daylight_savings")

    role BigInt?
    channel BigInt?
    icon String?

    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
    division Division @relation(fields: [divisionId], references: [id], onDelete: Restrict)
    members TeamMember[]
    logs Log[]
    times TeamTime[]
    computedTimes TeamTimeComputed[]

    @@unique([guildId, alias])
    @@schema("guild")
    @@map("team")
}

model TeamTime {
    id Int @id @default(autoincrement()) @map("team_time_id")
    teamId Int @map("team_id")
    time DateTime @db.Timestamptz(0)

    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    computed TeamTimeComputed @relation(fields: [id], references: [id])
    @@schema("guild")
    @@map("teamtime")
}

view TeamTimeComputed {
    id Int @id @map("team_time_id")
    teamId Int @map("team_id")

    previousTimestamp DateTime @db.Timestamptz(0) @map("prev_timestamp")
    nextTimestamp DateTime @db.Timestamptz(0) @map("next_timestamp")
    epoch BigInt
    dstNoticeWeeks Int @map("dst_notice_weeks")

    time TeamTime?
    team Team @relation(fields: [teamId], references: [id])
    @@schema("guild")
    @@map("teamtimecomputed")
}

view TimeZone {
    name String @unique
    abbreviation String
    display String

    @@schema("guild")
    @@map("timezone")
}

model TeamMember {
    id Int @id @default(autoincrement()) @map("team_member_id")
    teamId Int @map("team_id")
    memberId Int @map("guild_member_id")
    role TeamMemberRole @default(Member)
    source BigInt? // the originating role; if null, then manually added.
    // TODO: history

    computed TeamMemberComputed @relation(fields: [id], references: [id])
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    member GuildMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
    logParticipation LogPlayer[]
    @@unique([teamId, memberId])
    @@schema("guild")
    @@map("teammember")
}

view TeamMemberComputed {
    id Int @id @map("team_member_id")

    nickname String?
    username String
    discriminator String

    memberAvatar String? @map("member_avatar")
    userAvatar String? @map("user_avatar")

    member TeamMember?
    @@schema("guild")
    @@map("teammembercomputed")
}

// ========================================================================== //
//                                   APP                                      //
// ========================================================================== //

model Profile {
    id Int @id @default(autoincrement()) @map("profile_id")
    snowflake BigInt @unique // same as user.snowflake, to ease lookups and handling
    userId Int @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@schema("app")
    @@map("profile")
}
