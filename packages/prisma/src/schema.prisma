generator client {
    provider = "prisma-client-js"
    output = "../generated/client"
    previewFeatures = [ "extendedWhereUnique", "views", "clientExtensions", "multiSchema" ]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas = [ "log", "guild", "public" ]
}

enum CharacterClass {
    Elementalist @map("elementalist")
    Engineer     @map("engineer")
    Guardian     @map("guardian")
    Mesmer       @map("mesmer")
    Necromancer  @map("necromancer")
    Ranger       @map("ranger")
    Revenant     @map("revenant")
    Thief        @map("thief")
    Warrior      @map("warrior")

    @@schema("public")
    @@map("characterclass")
}

enum EliteSpecialization {
    Core            @map("core")
    Tempest         @map("tempest")
    Scrapper        @map("scrapper")
    Dragonhunter    @map("dragonhunter")
    Chronomancer    @map("chronomancer")
    Reaper          @map("reaper")
    Druid           @map("druid")
    Herald          @map("herald")
    Daredevil       @map("daredevil")
    Berserker       @map("berserker")
    Weaver          @map("weaver")
    Holosmith       @map("holosmith")
    Firebrand       @map("firebrand")
    Mirage          @map("mirage")
    Scourge         @map("scourge")
    Soulbeast       @map("soulbeast")
    Renegade        @map("renegade")
    Deadeye         @map("deadeye")
    Spellbreaker    @map("spellbreaker")
    Catalyst        @map("catalyst")
    Mechanist       @map("mechanist")
    Willbender      @map("willbender")
    Virtuoso        @map("virtuoso")
    Harbinger       @map("harbinger")
    Untamed         @map("untamed")
    Vindicator      @map("vindicator")
    Specter         @map("specter")
    Bladesworn      @map("bladesworn")

    @@schema("public")
    @@map("elitespecialization")
}

// ========================================================================== //
//                                   LOGS                                     //
// ========================================================================== //

enum LogDifficultyType {
    NormalMode      @map("normal_mode")
    ChallengeMode   @map("challenge_mode")
    Emboldened      @map("emboldened_mode")

    @@schema("log")
    @@map("logdifficultytype")
}

enum Boss {
    // Wing 1
    ValeGuardian    @map("vale_guardian")
    Gorseval        @map("gorseval")
    Sabetha         @map("sabetha")

    // Wing 2
    Slothasor       @map("slothasor")
    BandiTrio       @map("bandit_trio")
    Matthias        @map("matthias")

    // Wing 3
    Escort          @map("escort")
    KeepConstruct   @map("keep_construct")
    TwistedCastle   @map("twisted_castle")
    Xera            @map("xera")

    // Wing 4
    Cairn           @map("cairn")
    MursaatOverseer @map("mursaat_overseer")
    Samarog         @map("samarog")
    Deimos          @map("deimos")

    // Wing 5
    SoullessHorror  @map("soulless_horror")
    RiverOfSouls    @map("river_of_souls")
    BrokenKing      @map("broken_king")
    SoulEater       @map("soul_eater")
    EyeOfJudgmentFate @map("eye_of_judgement_fate")
    Dhuum           @map("dhuum")

    // Wing 6
    ConjuredAmalgamate @map("conjured_amalgamate")
    TwinLargos      @map("twin_largos")
    Qadim           @map("qadim")

    // Wing 7
    Adina           @map("adina")
    Sabir           @map("sabir")
    QadimThePeerless @map("qadim_the_peerless")

    // Strikes
    Freezie         @map("freezie")
    IcebroodConstruct @map("icebrood_construct")
    FraenirOfJormag @map("fraenir_of_jormag")
    VoiceClawOfTheFallen @map("voice_claw_of_the_fallen")
    Boneskinner     @map("boneskinner")
    WhisperOfJormag @map("whisper_of_jormag")
    ColdWar         @map("cold_war")

    // Strikes 2
    AetherbladeHideout @map("aetherblade_hideout")
    XunlaiJadeJunkyard @map("xunlai_jade_junkyard")
    KainengOverlook @map("kaineng_overlook")
    HarvestTemple   @map("harvest_temple")
    OldLionsCourt   @map("old_lions_court")

    @@schema("log")
    @@map("boss")
}

model LogPlayer {
    id Int @id @default(autoincrement()) @map("log_player_id")
    logId Int @map("log_id")
    log Log @relation(references: [id], fields: [logId])

    teamMemberId Int? @map("team_member_id")
    teamMember TeamMember? @relation(fields: [teamMemberId], references: [id])

    character String
    account String
    group Int
    class CharacterClass
    specialization EliteSpecialization

    extendedData Json?

    @@schema("log")
    @@map("log_player")
}

model Log {
    id Int @id @default(autoincrement()) @map("log_id")
    teamId Int
    url String @unique
    boss Boss
    difficulty LogDifficultyType
    emboldenedLevel Int? @db.SmallInt @default(dbgenerated("null"))
    success Boolean
    duration Int // milliseconds

    players LogPlayer[]
    team Team @relation(fields: [teamId], references: [id])

    startAt DateTime @db.Timestamptz(3) @map("start_at")
    submittedAt DateTime @db.Timestamptz(3) @map("submitted_at")

    @@schema("public")
    @@map("log")
}

// ========================================================================== //
//                                  USERS                                     //
// ========================================================================== //

// ========================================================================== //
//                                  GUILDS                                    //
// ========================================================================== //


model Guild {
    id Int @id @map("guild_id")
    snowflake BigInt @unique

    teams Team[]
    members GuildMember[]
    divisions Division[]
    @@schema("guild")
    @@map("guild")
}

model GuildMember {
    id Int @id @map("guild_member_id")
    guildId Int @map("guild_id")

    guild Guild @relation(fields: [guildId], references: [id])
    teamMemberships TeamMember[]
    @@schema("guild")
    @@map("guildmember")
}

// ========================================================================== //
//                                 DIVISIONS                                  //
// ========================================================================== //

model Division {
    id Int @id @default(autoincrement()) @map("division_id")
    guildId Int @map("guild_id")
    snowflake BigInt @unique
    name String

    guild Guild @relation(fields: [guildId], references: [id])
    teams TeamDivision[]
    @@schema("guild")
    @@map("division")
}

// ========================================================================== //
//                                  TEAMS                                     //
// ========================================================================== //

enum TeamMemberRole {
    Member          @map("member")
    Representative  @map("representative")
    Captain         @map("captain")

    @@schema("guild")
    @@map("teammemberrole")
}

model Team {
    id Int @id @default(autoincrement()) @map("team_id")
    snowflake BigInt @unique
    guildId Int @map("guild_id")
    name String

    guild Guild @relation(fields: [guildId], references: [id])
    members TeamMember[]
    divisions TeamDivision[]
    logs Log[]
    @@schema("guild")
    @@map("team")
}

model TeamDivision {
    id Int @id @default(autoincrement()) @map("team_division_id")
    teamId Int @map("team_id")
    divisionId Int @map("division_id")

    team Team @relation(fields: [teamId], references: [id])
    division Division @relation(fields: [divisionId], references: [id])
    @@unique([teamId, divisionId])
    @@schema("guild")
    @@map("teamdivision")
}

model TeamMember {
    id Int @id @default(autoincrement()) @map("team_member_id")
    teamId Int @map("team_id")
    memberId Int @map("guild_member_id")
    team Team @relation(fields: [teamId], references: [id])
    member GuildMember @relation(fields: [memberId], references: [id])

    role TeamMemberRole @default(Member)
    // TODO: history
    // TODO: player

    logParticipation LogPlayer[]
    @@schema("guild")
    @@map("teammember")
}
